// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'src/models/restaurant.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 1950204987501505857),
      name: 'Restaurant',
      lastPropertyId: const obx_int.IdUid(9, 3751905172721504818),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2933840238743062448),
            name: 'primaryKey',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 684941778482449000),
            name: 'id',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 8672494060826536731),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7113108354217126608),
            name: 'price',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 384872261558721555),
            name: 'rating',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1679538245948052992),
            name: 'photoUrl',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 196308161532898365),
            name: 'category',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6299227706741662120),
            name: 'isOpen',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 3751905172721504818),
            name: 'address',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(1, 1950204987501505857),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Restaurant: obx_int.EntityDefinition<Restaurant>(
        model: _entities[0],
        toOneRelations: (Restaurant object) => [],
        toManyRelations: (Restaurant object) => {},
        getId: (Restaurant object) => object.primaryKey,
        setId: (Restaurant object, int id) {
          object.primaryKey = id;
        },
        objectToFB: (Restaurant object, fb.Builder fbb) {
          final idOffset =
              object.id == null ? null : fbb.writeString(object.id!);
          final nameOffset =
              object.name == null ? null : fbb.writeString(object.name!);
          final priceOffset =
              object.price == null ? null : fbb.writeString(object.price!);
          final photoUrlOffset = object.photoUrl == null
              ? null
              : fbb.writeString(object.photoUrl!);
          final categoryOffset = object.category == null
              ? null
              : fbb.writeString(object.category!);
          final addressOffset =
              object.address == null ? null : fbb.writeString(object.address!);
          fbb.startTable(10);
          fbb.addInt64(0, object.primaryKey);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, nameOffset);
          fbb.addOffset(3, priceOffset);
          fbb.addFloat64(4, object.rating);
          fbb.addOffset(5, photoUrlOffset);
          fbb.addOffset(6, categoryOffset);
          fbb.addBool(7, object.isOpen);
          fbb.addOffset(8, addressOffset);
          fbb.finish(fbb.endTable());
          return object.primaryKey;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final primaryKeyParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final idParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final priceParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 10);
          final ratingParam = const fb.Float64Reader()
              .vTableGetNullable(buffer, rootOffset, 12);
          final photoUrlParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 14);
          final categoryParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 16);
          final isOpenParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 18);
          final addressParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 20);
          final object = Restaurant(
              primaryKey: primaryKeyParam,
              id: idParam,
              name: nameParam,
              price: priceParam,
              rating: ratingParam,
              photoUrl: photoUrlParam,
              category: categoryParam,
              isOpen: isOpenParam,
              address: addressParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Restaurant] entity fields to define ObjectBox queries.
class Restaurant_ {
  /// see [Restaurant.primaryKey]
  static final primaryKey =
      obx.QueryIntegerProperty<Restaurant>(_entities[0].properties[0]);

  /// see [Restaurant.id]
  static final id =
      obx.QueryStringProperty<Restaurant>(_entities[0].properties[1]);

  /// see [Restaurant.name]
  static final name =
      obx.QueryStringProperty<Restaurant>(_entities[0].properties[2]);

  /// see [Restaurant.price]
  static final price =
      obx.QueryStringProperty<Restaurant>(_entities[0].properties[3]);

  /// see [Restaurant.rating]
  static final rating =
      obx.QueryDoubleProperty<Restaurant>(_entities[0].properties[4]);

  /// see [Restaurant.photoUrl]
  static final photoUrl =
      obx.QueryStringProperty<Restaurant>(_entities[0].properties[5]);

  /// see [Restaurant.category]
  static final category =
      obx.QueryStringProperty<Restaurant>(_entities[0].properties[6]);

  /// see [Restaurant.isOpen]
  static final isOpen =
      obx.QueryBooleanProperty<Restaurant>(_entities[0].properties[7]);

  /// see [Restaurant.address]
  static final address =
      obx.QueryStringProperty<Restaurant>(_entities[0].properties[8]);
}
