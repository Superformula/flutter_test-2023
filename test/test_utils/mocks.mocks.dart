// Mocks generated by Mockito 5.4.4 from annotations
// in restaurantour/test/test_utils/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:restaurantour/domain/restaurants/entities/restaurant_entity.dart'
    as _i4;
import 'package:restaurantour/domain/restaurants/use_cases/get_restaurants_use_case.dart'
    as _i2;
import 'package:restaurantour/domain/restaurants/use_cases/watch_favorite_restaurants_use_case.dart'
    as _i5;
import 'package:restaurantour/presentation/restaurants/restaurant_list/restaurant_list_view_model.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [GetRestaurantsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetRestaurantsUseCase extends _i1.Mock
    implements _i2.GetRestaurantsUseCase {
  @override
  _i3.Future<List<_i4.RestaurantEntity>> call(int? offset) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [offset],
        ),
        returnValue: _i3.Future<List<_i4.RestaurantEntity>>.value(
            <_i4.RestaurantEntity>[]),
        returnValueForMissingStub: _i3.Future<List<_i4.RestaurantEntity>>.value(
            <_i4.RestaurantEntity>[]),
      ) as _i3.Future<List<_i4.RestaurantEntity>>);
}

/// A class which mocks [WatchFavoriteRestaurantsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchFavoriteRestaurantsUseCase extends _i1.Mock
    implements _i5.WatchFavoriteRestaurantsUseCase {
  @override
  _i3.Stream<List<String>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i3.Stream<List<String>>.empty(),
        returnValueForMissingStub: _i3.Stream<List<String>>.empty(),
      ) as _i3.Stream<List<String>>);
}

/// A class which mocks [RestaurantListViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockRestaurantListViewModel extends _i1.Mock
    implements _i6.RestaurantListViewModel {
  @override
  List<_i4.RestaurantEntity> get restaurants => (super.noSuchMethod(
        Invocation.getter(#restaurants),
        returnValue: <_i4.RestaurantEntity>[],
        returnValueForMissingStub: <_i4.RestaurantEntity>[],
      ) as List<_i4.RestaurantEntity>);

  @override
  List<String> get favoriteRestaurants => (super.noSuchMethod(
        Invocation.getter(#favoriteRestaurants),
        returnValue: <String>[],
        returnValueForMissingStub: <String>[],
      ) as List<String>);

  @override
  bool get hasError => (super.noSuchMethod(
        Invocation.getter(#hasError),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasData => (super.noSuchMethod(
        Invocation.getter(#hasData),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> getRestaurants() => (super.noSuchMethod(
        Invocation.method(
          #getRestaurants,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
